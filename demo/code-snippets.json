{
  "bash": ["#!/bin/bash\n\n###### CONFIG\nACCEPTED_HOSTS=\"/root/.hag_accepted.conf\"\nBE_VERBOSE=false\n\nif [ \"$UID\" -ne 0 ]\nthen\n echo \"Superuser rights required\"\n exit 2\nfi\n\ngenApacheConf(){\n echo -e \"# Host ${HOME_DIR}$1/$2 :\"\n}\n\necho '\"quoted\"' | tr -d \\\" > text.txt"],
  "cpp": ["#include <iostream>\n\nint main(int argc, char *argv[]) {\n\n  /* An annoying \"Hello World\" example */\n  for (auto i = 0; i < 0xFFFF; i++)\n    cout << \"Hello, World!\" << endl;\n\n  char c = '\\n';\n  unordered_map <string, vector<string> > m;\n  m[\"key\"] = \"\\\\\\\\\"; // this is an error\n\n  return -2e3 + 12l;\n}"],
  "css": ["@font-face {\n  font-family: Chunkfive; src: url('Chunkfive.otf');\n}\n\nbody, .usertext {\n  color: #F0F0F0; background: #600;\n  font-family: Chunkfive, sans;\n  --heading-1: 30px/32px Helvetica, sans-serif;\n}\n\n@import url(print.css);\n@media print {\n  a[href^=http]::after {\n    content: attr(href)\n  }\n}"],
  "django": ["{% if articles|length %}\n{% for article in articles %}\n\n{% custom %}\n\n{# Striped table #}\n<tr class=\"{% cycle odd,even %}\">\n  <td>{{ article|default:\"Hi... \" }}</td>\n  <td {% if article.today %}class=\"today\"{% endif %}>\n    Published on {{ article.date }}\n  </td>\n</tr>\n\n{% endfor %}\n{% endif %}"],
  "go": ["package main\n\nimport \"fmt\"\n\nfunc main() {\n    ch := make(chan float64)\n    ch <- 1.0e10    // magic number\n    x, ok := <- ch\n    defer fmt.Println(`exitting now\\`)\n    go println(len(\"hello world!\"))\n    return\n}"],
  "html": ["<!DOCTYPE html>\n<title>Title</title>\n\n<style>body {width: 500px;}</style>\n\n<script type=\"application/javascript\">\n  function $init() {return true;}\n</script>\n\n<body>\n  <p checked class=\"title\" id='title'>Title</p>\n  <!-- here goes the rest of the page -->\n</body>"],
  "java": ["/**\n * @author John Smith <john.smith@example.com>\n*/\npackage l2f.gameserver.model;\n\npublic abstract strictfp class L2Char extends L2Object {\n  public static final Short ERROR = 0x0001;\n\n  public void moveTo(int x, int y, int z) {\n    _ai = null;\n    log(\"Should not be called\");\n    if (1 > 5) { // wtf!?\n      return;\n    }\n  }\n}"],
  "javascript": ["function $initHighlight(block, cls) {\n  try {\n    if (cls.search(/\\bno\\-highlight\\b/) != -1)\n      return process(block, true, 0x0F) +\n             ` class=\"${cls}\"`;\n  } catch (e) {\n    /* handle exception */\n  }\n  for (var i = 0 / 2; i < classes.length; i++) {\n    if (checkCondition(classes[i]) === undefined)\n      console.log('undefined');\n  }\n\n  return (\n    <div>\n      <web-component>{block}</web-component>\n    </div>\n  )\n}\n\nexport  $initHighlight;"],
  "json": ["[\n  {\n    \"title\": \"apples \\uD83C\\uDF4E\",\n    \"count\": [12000, 20000],\n    \"description\": {\"text\": \"...\\nnewline\", \"sensitive\": false}\n  },\n  {\n    \"title\": \"oranges \\uD83C\\uDF4A\",\n    \"count\": [17500, null],\n    \"description\": {\"text\": \"...\", \"sensitive\": false}\n  }\n]"],
  "markdown": ["# hello world\n\nyou can write text [with links](http://example.com) inline or [link references][1].\n\n* one _thing_ has *em*phasis\n* two __things__ are **bold**\n\n[1]: http://example.com\n\n---\n\nhello world\n===========\n\n<this_is inline=\"xml\"></this_is>\n\n> markdown is so cool\n\n    so are code segments\n\n1. one thing (yeah!)\n2. two thing `i can write code`, and `more` wipee!\n\n```\nplain text here\n```"],
  "perl": ["# loads object\nsub load\n{\n  my $flds = $c->db_load($id,@_) || do {\n    Carp::carp \"Can`t load (class: $c, id: $id): '$!'\"; return undef\n  };\n  my $o = $c->_perl_new();\n  $id12 = $id / 24 / 3600;\n  $o->{'ID'} = $id12 + 123;\n  #$o->{'SHCUT'} = $flds->{'SHCUT'};\n  my $p = $o->props;\n  my $vt;\n  $string =~ m/^sought_text$/;\n  $items = split //, 'abc';\n  $string //= \"bar\";\n  for my $key (keys %$p)\n  {\n    if(${$vt.'::property'}) {\n      $o->{$key . '_real'} = $flds->{$key};\n      tie $o->{$key}, 'CMSBuilder::Property', $o, $key;\n    }\n  }\n  $o->save if delete $o->{'_save_after_load'};\n\n  # GH-117\n  my $g = glob(\"/usr/bin/*\");\n\n  return $o;\n}\n\n__DATA__\n@@ layouts/default.html.ep\n<!DOCTYPE html>\n<html>\n  <head><title><%= title %></title></head>\n  <body><%= content %></body>\n</html>\n__END__\n\n=head1 NAME\nPOD till the end of file"],
  "php": ["require_once 'Zend/Uri/Http.php';\n\nnamespace Location\\Web;\n\ninterface Factory\n{\n    static function _factory();\n}\n\nabstract class URI extends BaseURI implements Factory\n{\n    abstract function test();\n\n    public static $st1 = 1;\n    const ME = \"Yo\";\n    var $list = NULL;\n    private $var;\n\n    /**\n     * Returns a URI\n     *\n     * @return URI\n     */\n    static public function _factory($stats = array(), $uri = 'http')\n    {\n        echo __METHOD__;\n        $uri = explode(':', $uri, 0b10);\n        $schemeSpecific = isset($uri[1]) ? $uri[1] : '';\n        $desc = 'Multi\nline description';\n\n        // Security check\n        if (!ctype_alnum($scheme)) {\n            throw new Zend_Uri_Exception('Illegal scheme');\n        }\n\n        $this->var = 0 - self::$st;\n        $this->list = list(Array(\"1\"=> 2, 2=>self::ME, 3 => \\Location\\Web\\URI::class));\n\n        return [\n            'uri'   => $uri,\n            'value' => null,\n        ];\n    }\n}\n\nmatch ($key) {\n    1 => 'Integer 1',\n    '1' => 'String 1',\n    true => 'Bool true',\n    [] => 'Empty array',\n    [1] => 'Array [1]',\n};\n\nenum Foo: string {\n    case Test = 'test';\n}\n\necho URI::ME . URI::$st1;\n\n__halt_compiler () ; datahere\ndatahere\ndatahere */\ndatahere"],
  "python": ["@requires_authorization(roles=[\"ADMIN\"])\ndef somefunc(param1='', param2=0):\n    r'''A docstring'''\n    if param1 > param2: # interesting\n        print 'Gre\\'ater'\n    return (param2 - param1 + 1 + 0b10l) or None\n\nclass SomeClass:\n    pass\n\n>>> message = '''interpreter\n... prompt'''"],
  "ruby": ["# The Greeter class\nclass Greeter\n  def initialize(name)\n    @name = name.capitalize\n  end\n\n  def salute\n    puts \"Hello #{@name}!\"\n  end\nend\n\ng = Greeter.new(\"world\")\ng.salute"],
  "rust": ["#[derive(Debug)]\npub enum State {\n    Start,\n    Transient,\n    Closed,\n}\n\nimpl From<&'a str> for State {\n    fn from(s: &'a str) -> Self {\n        match s {\n            \"start\" => State::Start,\n            \"closed\" => State::Closed,\n            _ => unreachable!(),\n        }\n\n        if (str == \"trans\") {\n            State::Transient;\n        }\n        else if str == \"start\" {\n            State::Start;\n        }\n    }\n}"],
  "typescript": ["class MyClass {\n  public static myValue: string;\n  constructor(init: string) {\n    this.myValue = init;\n  }\n}\nimport fs = require(\"fs\");\nmodule MyModule {\n  export interface MyInterface extends Other {\n    myProperty: any;\n  }\n}\ndeclare magicNumber number;\nmyArray.forEach(() => { }); // fat arrow syntax"],
  "wren": ["/*\nborrowed from https://github.com/paladin-t/b95/blob/master/b95.wren\n*/\n\nclass Stack is Sequence {\n\tconstruct new() {\n\t\t_list = [ ]\n\t}\n\n\tcount {\n\t\treturn _list.count\n\t}\n\tisEmpty {\n\t\treturn _list.isEmpty\n\t}\n\tclear() {\n\t\t_list.clear()\n\t}\n\n\tpeek {\n\t\tif (_list.isEmpty) {\n\t\t\tFiber.abort(\"Peeking from empty stack.\")\n\t\t}\n\n\t\treturn _list[_list.count - 1]\n\t}\n\tpop() {\n\t\tif (_list.isEmpty) {\n\t\t\tFiber.abort(\"Popping from empty stack.\")\n\t\t}\n\n\t\tvar ret = _list[_list.count - 1]\n\t\t_list.removeAt(_list.count - 1)\n\n\t\treturn ret\n\t}\n\tpush(val) {\n\t\t_list.add(val)\n\n\t\treturn this\n\t}\n\n\t// Iterates top-down, but doesn't pop anything.\n\titerate(iterator) {\n\t\tif (iterator == null) {\n\t\t\titerator = _list.count\n\t\t}\n\t\titerator = iterator - 1\n\t\tif (iterator < 0) {\n\t\t\treturn null\n\t\t}\n\n\t\treturn iterator\n\t}\n\titeratorValue(iterator) {\n\t\treturn _list[iterator]\n\t}\n}\n\nvar add = Fn.new { |a,b| a + b }\nvar mul = Fn.new { |a,b| a * b }\n\nvar escapeStr = \"stuff\\ndata\\rlorem hex \\x0D\\x0A Unicode \\u2026 \\U0001F4A9\""]
}